/*
Model Registry REST API

REST API for Model Registry to create and manage ML model metadata

API version: v1alpha1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model_registry_client

import (
	"encoding/json"
	"fmt"
)

// Artifact - A metadata Artifact Entity.
type Artifact struct {
	DocArtifact *DocArtifact
	ModelArtifact *ModelArtifact
}

// DocArtifactAsArtifact is a convenience function that returns DocArtifact wrapped in Artifact
func DocArtifactAsArtifact(v *DocArtifact) Artifact {
	return Artifact{
		DocArtifact: v,
	}
}

// ModelArtifactAsArtifact is a convenience function that returns ModelArtifact wrapped in Artifact
func ModelArtifactAsArtifact(v *ModelArtifact) Artifact {
	return Artifact{
		ModelArtifact: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Artifact) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DocArtifact
	err = newStrictDecoder(data).Decode(&dst.DocArtifact)
	if err == nil {
		jsonDocArtifact, _ := json.Marshal(dst.DocArtifact)
		if string(jsonDocArtifact) == "{}" { // empty struct
			dst.DocArtifact = nil
		} else {
			match++
		}
	} else {
		dst.DocArtifact = nil
	}

	// try to unmarshal data into ModelArtifact
	err = newStrictDecoder(data).Decode(&dst.ModelArtifact)
	if err == nil {
		jsonModelArtifact, _ := json.Marshal(dst.ModelArtifact)
		if string(jsonModelArtifact) == "{}" { // empty struct
			dst.ModelArtifact = nil
		} else {
			match++
		}
	} else {
		dst.ModelArtifact = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DocArtifact = nil
		dst.ModelArtifact = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Artifact)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Artifact)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Artifact) MarshalJSON() ([]byte, error) {
	if src.DocArtifact != nil {
		return json.Marshal(&src.DocArtifact)
	}

	if src.ModelArtifact != nil {
		return json.Marshal(&src.ModelArtifact)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Artifact) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DocArtifact != nil {
		return obj.DocArtifact
	}

	if obj.ModelArtifact != nil {
		return obj.ModelArtifact
	}

	// all schemas are nil
	return nil
}

type NullableArtifact struct {
	value *Artifact
	isSet bool
}

func (v NullableArtifact) Get() *Artifact {
	return v.value
}

func (v *NullableArtifact) Set(val *Artifact) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifact(val *Artifact) *NullableArtifact {
	return &NullableArtifact{value: val, isSet: true}
}

func (v NullableArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


