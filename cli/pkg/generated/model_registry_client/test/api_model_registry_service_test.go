/*
Model Registry REST API

Testing ModelRegistryServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package model_registry_client

import (
	"context"
	"testing"

	openapiclient "github.com/opendatahub-io/ai-edge/cli/pkg/generated/model_registry_client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_model_registry_client_ModelRegistryServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateEnvironmentInferenceService", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var servingenvironmentId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateEnvironmentInferenceService(
				context.Background(), servingenvironmentId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateInferenceService", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateInferenceService(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateInferenceServiceServe", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateInferenceServiceServe(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateModelArtifact", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateModelArtifact(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateModelVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateModelVersion(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateModelVersionArtifact", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelversionId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateModelVersionArtifact(
				context.Background(), modelversionId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateRegisteredModel", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateRegisteredModel(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateRegisteredModelVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var registeredmodelId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateRegisteredModelVersion(
				context.Background(), registeredmodelId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService CreateServingEnvironment", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.CreateServingEnvironment(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService FindInferenceService", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.FindInferenceService(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService FindModelArtifact", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.FindModelArtifact(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService FindModelVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.FindModelVersion(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService FindRegisteredModel", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.FindRegisteredModel(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService FindServingEnvironment", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.FindServingEnvironment(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetEnvironmentInferenceServices", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var servingenvironmentId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetEnvironmentInferenceServices(
				context.Background(), servingenvironmentId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetInferenceService", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetInferenceService(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetInferenceServiceModel", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetInferenceServiceModel(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetInferenceServiceServes", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetInferenceServiceServes(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetInferenceServiceVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetInferenceServiceVersion(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetInferenceServices", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetInferenceServices(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetModelArtifact", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelartifactId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetModelArtifact(
				context.Background(), modelartifactId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetModelArtifacts", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetModelArtifacts(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetModelVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelversionId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetModelVersion(
				context.Background(), modelversionId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetModelVersionArtifacts", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelversionId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetModelVersionArtifacts(
				context.Background(), modelversionId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetModelVersions", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetModelVersions(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetRegisteredModel", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var registeredmodelId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetRegisteredModel(
				context.Background(), registeredmodelId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetRegisteredModelVersions", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var registeredmodelId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetRegisteredModelVersions(
				context.Background(), registeredmodelId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetRegisteredModels", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetRegisteredModels(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetServingEnvironment", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var servingenvironmentId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetServingEnvironment(
				context.Background(), servingenvironmentId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService GetServingEnvironments", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.GetServingEnvironments(context.Background()).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService UpdateInferenceService", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var inferenceserviceId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.UpdateInferenceService(
				context.Background(), inferenceserviceId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService UpdateModelArtifact", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelartifactId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.UpdateModelArtifact(
				context.Background(), modelartifactId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService UpdateModelVersion", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var modelversionId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.UpdateModelVersion(
				context.Background(), modelversionId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService UpdateRegisteredModel", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var registeredmodelId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.UpdateRegisteredModel(
				context.Background(), registeredmodelId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

	t.Run(
		"Test ModelRegistryServiceAPIService UpdateServingEnvironment", func(t *testing.T) {

			t.Skip("skip test") // remove to run test

			var servingenvironmentId string

			resp, httpRes, err := apiClient.ModelRegistryServiceAPI.UpdateServingEnvironment(
				context.Background(), servingenvironmentId,
			).Execute()

			require.Nil(t, err)
			require.NotNil(t, resp)
			assert.Equal(t, 200, httpRes.StatusCode)

		},
	)

}
