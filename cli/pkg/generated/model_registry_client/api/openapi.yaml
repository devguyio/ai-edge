openapi: 3.0.3
info:
  description: REST API for Model Registry to create and manage ML model metadata
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Model Registry REST API
  version: v1alpha1
servers:
- url: https://localhost:8080
- url: http://localhost:8080
security:
- Bearer: []
tags:
- description: Model Registry Service REST API
  name: ModelRegistryService
paths:
  /api/model_registry/v1alpha1/model_artifact:
    description: The REST endpoint/path used to search for a `ModelArtifact` entity.  This
      path contains a `GET` operation to perform the find task.
    get:
      description: Gets the details of a single instance of a `ModelArtifact` that
        matches search parameters.
      operationId: findModelArtifact
      parameters:
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: ID of the parent resource to use for search.
        examples:
          parentResourceID:
            value: "10"
        explode: true
        in: query
        name: parentResourceID
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelArtifact'
          description: A response containing a `ModelArtifact` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a ModelArtifact that matches search parameters.
      tags:
      - ModelRegistryService
    summary: Path used to search for a modelartifact.
  /api/model_registry/v1alpha1/model_artifacts:
    description: "The REST endpoint/path used to list and create zero or more `ModelArtifact`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `ModelArtifact` entities.
      operationId: getModelArtifacts
      parameters:
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelArtifactList'
          description: A response containing a list of ModelArtifact entities.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All ModelArtifacts
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `ModelArtifact`.
      operationId: createModelArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelArtifactCreate'
        description: A new `ModelArtifact` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelArtifact'
          description: A response containing a `ModelArtifact` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a ModelArtifact
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of modelartifacts.
  /api/model_registry/v1alpha1/model_artifacts/{modelartifactId}:
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `ModelArtifact`. This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `ModelArtifact`.
      operationId: getModelArtifact
      parameters:
      - description: A unique identifier for a `ModelArtifact`.
        explode: false
        in: path
        name: modelartifactId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelArtifact'
          description: A response containing a `ModelArtifact` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a ModelArtifact
      tags:
      - ModelRegistryService
    patch:
      description: Updates an existing `ModelArtifact`.
      operationId: updateModelArtifact
      parameters:
      - description: A unique identifier for a `ModelArtifact`.
        explode: false
        in: path
        name: modelartifactId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelArtifactUpdate'
        description: Updated `ModelArtifact` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelArtifact'
          description: A response containing a `ModelArtifact` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Update a ModelArtifact
      tags:
      - ModelRegistryService
    summary: Path used to manage a single ModelArtifact.
  /api/model_registry/v1alpha1/model_versions:
    description: "The REST endpoint/path used to list and create zero or more `ModelVersion`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `ModelVersion` entities.
      operationId: getModelVersions
      parameters:
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionList'
          description: A response containing a list of `ModelVersion` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All ModelVersions
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `ModelVersion`.
      operationId: createModelVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionCreate'
        description: A new `ModelVersion` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a ModelVersion
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of modelversions.
  /api/model_registry/v1alpha1/model_versions/{modelversionId}:
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `ModelVersion`. This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `ModelVersion`.
      operationId: getModelVersion
      parameters:
      - description: A unique identifier for a `ModelVersion`.
        explode: false
        in: path
        name: modelversionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a ModelVersion
      tags:
      - ModelRegistryService
    patch:
      description: Updates an existing `ModelVersion`.
      operationId: updateModelVersion
      parameters:
      - description: A unique identifier for a `ModelVersion`.
        explode: false
        in: path
        name: modelversionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        description: Updated `ModelVersion` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Update a ModelVersion
      tags:
      - ModelRegistryService
    summary: Path used to manage a single ModelVersion.
  /api/model_registry/v1alpha1/registered_model:
    description: The REST endpoint/path used to search for a `RegisteredModel` entity.  This
      path contains a `GET` operation to perform the find task.
    get:
      description: Gets the details of a single instance of a `RegisteredModel` that
        matches search parameters.
      operationId: findRegisteredModel
      parameters:
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModel'
          description: A response containing a `RegisteredModel` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a RegisteredModel that matches search parameters.
      tags:
      - ModelRegistryService
    summary: Path used to search for a registeredmodel.
  /api/model_registry/v1alpha1/registered_models:
    description: "The REST endpoint/path used to list and create zero or more `RegisteredModel`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `RegisteredModel` entities.
      operationId: getRegisteredModels
      parameters:
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModelList'
          description: A response containing a list of `RegisteredModel` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All RegisteredModels
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `RegisteredModel`.
      operationId: createRegisteredModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredModelCreate'
        description: A new `RegisteredModel` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModel'
          description: A response containing a `RegisteredModel` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a RegisteredModel
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of registeredmodels.
  /api/model_registry/v1alpha1/registered_models/{registeredmodelId}:
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `RegisteredModel`. This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `RegisteredModel`.
      operationId: getRegisteredModel
      parameters:
      - description: A unique identifier for a `RegisteredModel`.
        explode: false
        in: path
        name: registeredmodelId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModel'
          description: A response containing a `RegisteredModel` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a RegisteredModel
      tags:
      - ModelRegistryService
    patch:
      description: Updates an existing `RegisteredModel`.
      operationId: updateRegisteredModel
      parameters:
      - description: A unique identifier for a `RegisteredModel`.
        explode: false
        in: path
        name: registeredmodelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisteredModelUpdate'
        description: Updated `RegisteredModel` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModel'
          description: A response containing a `RegisteredModel` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Update a RegisteredModel
      tags:
      - ModelRegistryService
    summary: Path used to manage a single RegisteredModel.
  /api/model_registry/v1alpha1/model_versions/{modelversionId}/artifacts:
    description: "The REST endpoint/path used to list and create zero or more `Artifact`\
      \ entities for a `ModelVersion`.  This path contains a `GET` and `POST` operation\
      \ to perform the list and create tasks, respectively."
    get:
      operationId: getModelVersionArtifacts
      parameters:
      - description: A unique identifier for a `ModelVersion`.
        explode: false
        in: path
        name: modelversionId
        required: true
        schema:
          type: string
        style: simple
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactList'
          description: A response containing a list of `Artifact` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List all artifacts associated with the `ModelVersion`
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of an Artifact if needed and associates
        it with `ModelVersion`.
      operationId: createModelVersionArtifact
      parameters:
      - description: A unique identifier for a `ModelVersion`.
        explode: false
        in: path
        name: modelversionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
        description: A new or existing `Artifact` to be associated with the `ModelVersion`.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
          description: A response containing an `Artifact` entity.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
          description: A response containing an `Artifact` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create an Artifact in a ModelVersion
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of artifacts for a modelversion.
  /api/model_registry/v1alpha1/registered_models/{registeredmodelId}/versions:
    description: "The REST endpoint/path used to list and create zero or more `ModelVersion`\
      \ entities for a `RegisteredModel`.  This path contains a `GET` and `POST` operation\
      \ to perform the list and create tasks, respectively."
    get:
      description: Gets a list of all `ModelVersion` entities for the `RegisteredModel`.
      operationId: getRegisteredModelVersions
      parameters:
      - description: A unique identifier for a `RegisteredModel`.
        explode: false
        in: path
        name: registeredmodelId
        required: true
        schema:
          type: string
        style: simple
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionList'
          description: A response containing a list of `ModelVersion` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All RegisteredModel's ModelVersions
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `ModelVersion`.
      operationId: createRegisteredModelVersion
      parameters:
      - description: A unique identifier for a `RegisteredModel`.
        explode: false
        in: path
        name: registeredmodelId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        description: A new `ModelVersion` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a ModelVersion in RegisteredModel
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of modelversions for a registeredmodel.
  /api/model_registry/v1alpha1/inference_service:
    description: "The REST endpoint/path used to list and create zero or more `InferenceService`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets the details of a single instance of `InferenceService` that
        matches search parameters.
      operationId: findInferenceService
      parameters:
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: ID of the parent resource to use for search.
        examples:
          parentResourceID:
            value: "10"
        explode: true
        in: query
        name: parentResourceID
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceService'
          description: A response containing a `InferenceService` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get an InferenceServices that matches search parameters.
      tags:
      - ModelRegistryService
    summary: Path used to manage an instance of inferenceservice.
  /api/model_registry/v1alpha1/inference_services/{inferenceserviceId}:
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `InferenceService`. This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `InferenceService`.
      operationId: getInferenceService
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceService'
          description: A response containing a `InferenceService` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a InferenceService
      tags:
      - ModelRegistryService
    patch:
      description: Updates an existing `InferenceService`.
      operationId: updateInferenceService
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceServiceUpdate'
        description: Updated `InferenceService` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceService'
          description: A response containing a `InferenceService` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Update a InferenceService
      tags:
      - ModelRegistryService
    summary: Path used to manage a single InferenceService.
  /api/model_registry/v1alpha1/inference_services:
    description: "The REST endpoint/path used to list and create zero or more `InferenceService`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `InferenceService` entities.
      operationId: getInferenceServices
      parameters:
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceServiceList'
          description: A response containing a list of `InferenceService` entities.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All InferenceServices
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `InferenceService`.
      operationId: createInferenceService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceServiceCreate'
        description: A new `InferenceService` to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceService'
          description: A response containing a `InferenceService` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a InferenceService
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of inferenceservices.
  /api/model_registry/v1alpha1/serving_environment:
    description: The REST endpoint/path used to search for a `ServingEnvironment`
      entity.  This path contains a `GET` operation to perform the find task.
    get:
      description: Finds a `ServingEnvironment` entity that matches query parameters.
      operationId: findServingEnvironment
      parameters:
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServingEnvironment'
          description: A response containing a `ServingEnvironment` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Find ServingEnvironment
      tags:
      - ModelRegistryService
    summary: Path used to find a servingenvironment.
  /api/model_registry/v1alpha1/serving_environments:
    description: "The REST endpoint/path used to list and create zero or more `ServingEnvironment`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `ServingEnvironment` entities.
      operationId: getServingEnvironments
      parameters:
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServingEnvironmentList'
          description: A response containing a list of `ServingEnvironment` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All ServingEnvironments
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `ServingEnvironment`.
      operationId: createServingEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServingEnvironmentCreate'
        description: A new `ServingEnvironment` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServingEnvironment'
          description: A response containing a `ServingEnvironment` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a ServingEnvironment
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of servingenvironments.
  /api/model_registry/v1alpha1/serving_environments/{servingenvironmentId}:
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `ServingEnvironment`.  This path contains `GET`, `PUT`, and `DELETE`\
      \ operations used to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `ServingEnvironment`.
      operationId: getServingEnvironment
      parameters:
      - description: A unique identifier for a `ServingEnvironment`.
        explode: false
        in: path
        name: servingenvironmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServingEnvironment'
          description: A response containing a `ServingEnvironment` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a ServingEnvironment
      tags:
      - ModelRegistryService
    patch:
      description: Updates an existing `ServingEnvironment`.
      operationId: updateServingEnvironment
      parameters:
      - description: A unique identifier for a `ServingEnvironment`.
        explode: false
        in: path
        name: servingenvironmentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServingEnvironmentUpdate'
        description: Updated `ServingEnvironment` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServingEnvironment'
          description: A response containing a `ServingEnvironment` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Update a ServingEnvironment
      tags:
      - ModelRegistryService
    summary: Path used to manage a single ServingEnvironment.
  /api/model_registry/v1alpha1/serving_environments/{servingenvironmentId}/inference_services:
    description: "The REST endpoint/path used to list and create zero or more `InferenceService`\
      \ entities for a `ServingEnvironment`.  This path contains a `GET` and `POST`\
      \ operation to perform the list and create tasks, respectively."
    get:
      description: Gets a list of all `InferenceService` entities for the `ServingEnvironment`.
      operationId: getEnvironmentInferenceServices
      parameters:
      - description: A unique identifier for a `ServingEnvironment`.
        explode: false
        in: path
        name: servingenvironmentId
        required: true
        schema:
          type: string
        style: simple
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceServiceList'
          description: A response containing a list of `InferenceService` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All ServingEnvironment's InferenceServices
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `InferenceService`.
      operationId: createEnvironmentInferenceService
      parameters:
      - description: A unique identifier for a `ServingEnvironment`.
        explode: false
        in: path
        name: servingenvironmentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceServiceCreate'
        description: A new `InferenceService` to be created.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceService'
          description: A response containing a `InferenceService` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a InferenceService in ServingEnvironment
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of `InferenceServices` for a `ServingEnvironment`.
  /api/model_registry/v1alpha1/inference_services/{inferenceserviceId}/serves:
    description: "The REST endpoint/path used to list and create zero or more `ServeModel`\
      \ entities for a `InferenceService`.  This path contains a `GET` and `POST`\
      \ operation to perform the list and create tasks, respectively."
    get:
      description: Gets a list of all `ServeModel` entities for the `InferenceService`.
      operationId: getInferenceServiceServes
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: Number of entities in each page.
        examples:
          pageSize:
            value: "100"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          type: string
        style: form
      - description: Specifies the order by criteria for listing entities.
        examples:
          orderBy:
            value: ID
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/OrderByField'
        style: form
      - description: "Specifies the sort order for listing entities, defaults to ASC."
        examples:
          sortOrder:
            value: DESC
        explode: true
        in: query
        name: sortOrder
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
        style: form
      - description: Token to use to retrieve next page of results.
        examples:
          nextPageToken:
            value: IkhlbGxvLCB3b3JsZC4i
        explode: true
        in: query
        name: nextPageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServeModelList'
          description: A response containing a list of `ServeModel` entities.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: List All InferenceService's ServeModel actions
      tags:
      - ModelRegistryService
    post:
      description: Creates a new instance of a `ServeModel` associated with `InferenceService`.
      operationId: createInferenceServiceServe
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServeModelCreate'
        description: A new `ServeModel` to be associated with the `InferenceService`.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServeModel'
          description: A response containing a `ServeModel` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Create a ServeModel action in a InferenceService
      tags:
      - ModelRegistryService
    summary: Path used to manage the list of `ServeModels` for a `InferenceService`.
  /api/model_registry/v1alpha1/inference_services/{inferenceserviceId}/model:
    description: The REST endpoint/path used to list the `RegisteredModel` entity
      for an `InferenceService`.  This path contains a `GET` operation to perform
      the get task.
    get:
      description: Gets the `RegisteredModel` entity for the `InferenceService`.
      operationId: getInferenceServiceModel
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModel'
          description: A response containing a `RegisteredModel` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get InferenceService's RegisteredModel
      tags:
      - ModelRegistryService
    summary: Path used to manage a `RegisteredModel` associated with an `InferenceService`.
  /api/model_registry/v1alpha1/inference_services/{inferenceserviceId}/version:
    description: The REST endpoint/path used to get the current `ModelVersion` entity
      for a `InferenceService`. This path contains a `GET` operation to perform the
      get task.
    get:
      description: Gets the `ModelVersion` entity for the `InferenceService`.
      operationId: getInferenceServiceVersion
      parameters:
      - description: A unique identifier for a `InferenceService`.
        explode: false
        in: path
        name: inferenceserviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get InferenceService's ModelVersion
      tags:
      - ModelRegistryService
    summary: Path used to get the current `ModelVersion` associated with an `InferenceService`.
  /api/model_registry/v1alpha1/model_version:
    description: The REST endpoint/path used to search for a `ModelVersion` entity.  This
      path contains a `GET` operation to perform the find task.
    get:
      description: Gets the details of a single instance of a `ModelVersion` that
        matches search parameters.
      operationId: findModelVersion
      parameters:
      - description: Name of entity to search.
        examples:
          name:
            value: entity-name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: External ID of entity to search.
        examples:
          externalID:
            value: "10"
        explode: true
        in: query
        name: externalID
        required: false
        schema:
          type: string
        style: form
      - description: ID of the parent resource to use for search.
        examples:
          parentResourceID:
            value: "10"
        explode: true
        in: query
        name: parentResourceID
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
          description: A response containing a `ModelVersion` entity.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected internal server error
      summary: Get a ModelVersion that matches search parameters.
      tags:
      - ModelRegistryService
    summary: Path used to search for a modelversion.
components:
  parameters:
    id:
      description: The ID of resource.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    name:
      description: Name of entity to search.
      examples:
        name:
          value: entity-name
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    externalID:
      description: External ID of entity to search.
      examples:
        externalID:
          value: "10"
      explode: true
      in: query
      name: externalID
      required: false
      schema:
        type: string
      style: form
    parentResourceID:
      description: ID of the parent resource to use for search.
      examples:
        parentResourceID:
          value: "10"
      explode: true
      in: query
      name: parentResourceID
      required: false
      schema:
        type: string
      style: form
    pageSize:
      description: Number of entities in each page.
      examples:
        pageSize:
          value: "100"
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        type: string
      style: form
    nextPageToken:
      description: Token to use to retrieve next page of results.
      examples:
        nextPageToken:
          value: IkhlbGxvLCB3b3JsZC4i
      explode: true
      in: query
      name: nextPageToken
      required: false
      schema:
        type: string
      style: form
    orderBy:
      description: Specifies the order by criteria for listing entities.
      examples:
        orderBy:
          value: ID
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        $ref: '#/components/schemas/OrderByField'
      style: form
    sortOrder:
      description: "Specifies the sort order for listing entities, defaults to ASC."
      examples:
        sortOrder:
          value: DESC
      explode: true
      in: query
      name: sortOrder
      required: false
      schema:
        $ref: '#/components/schemas/SortOrder'
      style: form
  responses:
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified resource was not found
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request parameters
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unexpected internal server error
    ModelArtifactListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelArtifactList'
      description: A response containing a list of ModelArtifact entities.
    ModelArtifactResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelArtifact'
      description: A response containing a `ModelArtifact` entity.
    ModelVersionListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelVersionList'
      description: A response containing a list of `ModelVersion` entities.
    ModelVersionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelVersion'
      description: A response containing a `ModelVersion` entity.
    RegisteredModelListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisteredModelList'
      description: A response containing a list of `RegisteredModel` entities.
    RegisteredModelResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisteredModel'
      description: A response containing a `RegisteredModel` entity.
    ArtifactResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Artifact'
      description: A response containing an `Artifact` entity.
    ArtifactListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArtifactList'
      description: A response containing a list of `Artifact` entities.
    ServingEnvironmentListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServingEnvironmentList'
      description: A response containing a list of `ServingEnvironment` entities.
    ServingEnvironmentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServingEnvironment'
      description: A response containing a `ServingEnvironment` entity.
    InferenceServiceListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceServiceList'
      description: A response containing a list of `InferenceService` entities.
    InferenceServiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceService'
      description: A response containing a `InferenceService` entity.
    ServeModelListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServeModelList'
      description: A response containing a list of `ServeModel` entities.
    ServeModelResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServeModel'
      description: A response containing a `ServeModel` entity.
  schemas:
    ArtifactState:
      default: UNKNOWN
      description: |2-
         - PENDING: A state indicating that the artifact may exist.
         - LIVE: A state indicating that the artifact should exist, unless something
        external to the system deletes it.
         - MARKED_FOR_DELETION: A state indicating that the artifact should be deleted.
         - DELETED: A state indicating that the artifact has been deleted.
         - ABANDONED: A state indicating that the artifact has been abandoned, which may be
        due to a failed or cancelled execution.
         - REFERENCE: A state indicating that the artifact is a reference artifact. At
        execution start time, the orchestrator produces an output artifact for
        each output key with state PENDING. However, for an intermediate
        artifact, this first artifact's state will be REFERENCE. Intermediate
        artifacts emitted during a component's execution will copy the REFERENCE
        artifact's attributes. At the end of an execution, the artifact state
        should remain REFERENCE instead of being changed to LIVE.

        See also: ml-metadata Artifact.State
      enum:
      - UNKNOWN
      - PENDING
      - LIVE
      - MARKED_FOR_DELETION
      - DELETED
      - ABANDONED
      - REFERENCE
      type: string
    RegisteredModelState:
      default: LIVE
      description: |-
        - LIVE: A state indicating that the `RegisteredModel` exists
        - ARCHIVED: A state indicating that the `RegisteredModel` has been archived.
      enum:
      - LIVE
      - ARCHIVED
      type: string
    ModelVersionState:
      default: LIVE
      description: |-
        - LIVE: A state indicating that the `ModelVersion` exists
        - ARCHIVED: A state indicating that the `ModelVersion` has been archived.
      enum:
      - LIVE
      - ARCHIVED
      type: string
    InferenceServiceState:
      default: DEPLOYED
      description: |-
        - DEPLOYED: A state indicating that the `InferenceService` should be deployed.
        - UNDEPLOYED: A state indicating that the `InferenceService` should be un-deployed.
        The state indicates the desired state of inference service.
        See the associated `ServeModel` for the actual status of service deployment action.
      enum:
      - DEPLOYED
      - UNDEPLOYED
      type: string
    ExecutionState:
      default: UNKNOWN
      description: |-
        The state of the Execution. The state transitions are
          NEW -> RUNNING -> COMPLETE | CACHED | FAILED | CANCELED
        CACHED means the execution is skipped due to cached results.
        CANCELED means the execution is skipped due to precondition not met. It is
        different from CACHED in that a CANCELED execution will not have any event
        associated with it. It is different from FAILED in that there is no
        unexpected error happened and it is regarded as a normal state.

        See also: ml-metadata Execution.State
      enum:
      - UNKNOWN
      - NEW
      - RUNNING
      - COMPLETE
      - FAILED
      - CACHED
      - CANCELED
      type: string
    ModelArtifact:
      allOf:
      - $ref: '#/components/schemas/BaseArtifact'
      - $ref: '#/components/schemas/ModelArtifactCreate'
      - properties:
          artifactType:
            default: model-artifact
            type: string
        type: object
      description: An ML model artifact.
      example:
        artifactType: model-artifact
      type: object
    DocArtifact:
      allOf:
      - $ref: '#/components/schemas/BaseArtifact'
      - properties:
          artifactType:
            default: doc-artifact
            type: string
        type: object
      description: A document.
      type: object
    RegisteredModel:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - type: object
      - $ref: '#/components/schemas/RegisteredModelCreate'
      description: A registered model in model registry. A registered model has ModelVersion
        children.
      example: {}
    ModelVersionList:
      allOf:
      - properties:
          items:
            description: Array of `ModelVersion` entities.
            items:
              $ref: '#/components/schemas/ModelVersion'
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of ModelVersion entities.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - registeredModelID: registeredModelID
        - registeredModelID: registeredModelID
      type: object
    ModelArtifactList:
      allOf:
      - properties:
          items:
            description: Array of `ModelArtifact` entities.
            items:
              $ref: '#/components/schemas/ModelArtifact'
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of ModelArtifact entities.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - artifactType: model-artifact
        - artifactType: model-artifact
      type: object
    RegisteredModelCreate:
      allOf:
      - type: object
      - $ref: '#/components/schemas/BaseResourceCreate'
      - $ref: '#/components/schemas/RegisteredModelUpdate'
      description: A registered model in model registry. A registered model has ModelVersion
        children.
      example: {}
    RegisteredModelUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      - properties:
          state:
            $ref: '#/components/schemas/RegisteredModelState'
        type: object
      description: A registered model in model registry. A registered model has ModelVersion
        children.
      example:
        customProperties:
          key:
            int_value: int_value
        description: description
        externalID: externalID
        state: null
    ModelVersion:
      allOf:
      - $ref: '#/components/schemas/ModelVersionCreate'
      - $ref: '#/components/schemas/BaseResource'
      description: Represents a ModelVersion belonging to a RegisteredModel.
      example:
        registeredModelID: registeredModelID
    ModelVersionCreate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceCreate'
      - $ref: '#/components/schemas/ModelVersionUpdate'
      description: Represents a ModelVersion belonging to a RegisteredModel.
      example:
        registeredModelID: registeredModelID
      properties:
        registeredModelID:
          description: ID of the `RegisteredModel` to which this version belongs.
          type: string
      required:
      - registeredModelID
    ModelVersionUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      - properties:
          state:
            $ref: '#/components/schemas/ModelVersionState'
          author:
            description: Name of the author.
            type: string
        type: object
      description: Represents a ModelVersion belonging to a RegisteredModel.
    BaseArtifactCreate:
      allOf:
      - $ref: '#/components/schemas/BaseArtifactUpdate'
      - $ref: '#/components/schemas/BaseResourceCreate'
    BaseArtifactUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      - properties:
          uri:
            description: |-
              The uniform resource identifier of the physical artifact.
              May be empty if there is no physical artifact.
            type: string
          state:
            $ref: '#/components/schemas/ArtifactState'
        type: object
    BaseExecution:
      allOf:
      - $ref: '#/components/schemas/BaseExecutionCreate'
      - type: object
      - $ref: '#/components/schemas/BaseResource'
    BaseExecutionCreate:
      allOf:
      - $ref: '#/components/schemas/BaseExecutionUpdate'
      - type: object
      - $ref: '#/components/schemas/BaseResourceCreate'
    BaseExecutionUpdate:
      allOf:
      - properties:
          lastKnownState:
            $ref: '#/components/schemas/ExecutionState'
        type: object
      - $ref: '#/components/schemas/BaseResourceUpdate'
      type: object
    MetadataValue:
      description: A value in properties.
      oneOf:
      - $ref: '#/components/schemas/MetadataIntValue'
      - $ref: '#/components/schemas/MetadataDoubleValue'
      - $ref: '#/components/schemas/MetadataStringValue'
      - $ref: '#/components/schemas/MetadataStructValue'
      - $ref: '#/components/schemas/MetadataProtoValue'
      - $ref: '#/components/schemas/MetadataBoolValue'
    MetadataIntValue:
      description: An integer (int64) property value.
      example:
        int_value: int_value
      properties:
        int_value:
          format: int64
          type: string
      type: object
    MetadataDoubleValue:
      description: A double property value.
      properties:
        double_value:
          format: double
          type: number
      type: object
    MetadataStringValue:
      description: A string property value.
      properties:
        string_value:
          type: string
      type: object
    MetadataStructValue:
      description: A struct property value.
      properties:
        struct_value:
          description: Base64 encoded bytes for struct value
          type: string
      type: object
    MetadataProtoValue:
      description: A proto property value.
      properties:
        type:
          description: url describing proto value
          type: string
        proto_value:
          description: Base64 encoded bytes for proto value
          type: string
      type: object
    MetadataBoolValue:
      description: A bool property value.
      properties:
        bool_value:
          type: boolean
      type: object
    BaseResource:
      allOf:
      - $ref: '#/components/schemas/BaseResourceCreate'
      - properties:
          id:
            description: Output only. The unique server generated id of the resource.
            format: int64
            readOnly: true
            type: string
          createTimeSinceEpoch:
            description: Output only. Create time of the resource in millisecond since
              epoch.
            format: int64
            readOnly: true
            type: string
          lastUpdateTimeSinceEpoch:
            description: |-
              Output only. Last update time of the resource since epoch in millisecond
              since epoch.
            format: int64
            readOnly: true
            type: string
        type: object
    BaseResourceCreate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      - properties:
          name:
            description: |-
              The client provided name of the artifact. This field is optional. If set,
              it must be unique among all the artifacts of the same artifact type within
              a database instance and cannot be changed once set.
            type: string
        type: object
    BaseResourceUpdate:
      properties:
        customProperties:
          additionalProperties:
            $ref: '#/components/schemas/MetadataValue'
          description: User provided custom properties which are not defined by its
            type.
          type: object
        description:
          description: An optional description about the resource.
          type: string
        externalID:
          description: |-
            The external id that come from the clients’ system. This field is optional.
            If set, it must be unique among all resources within a database instance.
          type: string
      type: object
    BaseResourceList:
      properties:
        nextPageToken:
          description: Token to use to retrieve next page of results.
          type: string
        pageSize:
          description: Maximum number of resources to return in the result.
          format: int32
          type: integer
        size:
          description: Number of items in result list.
          format: int32
          type: integer
      required:
      - nextPageToken
      - pageSize
      - size
      type: object
    ArtifactList:
      allOf:
      - properties:
          items:
            description: Array of `Artifact` entities.
            items:
              $ref: '#/components/schemas/Artifact'
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: A list of Artifact entities.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - artifactType: model-artifact
        - artifactType: model-artifact
      type: object
    ModelArtifactUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseArtifactUpdate'
      - properties:
          modelFormatName:
            description: Name of the model format.
            type: string
          storageKey:
            description: Storage secret name.
            type: string
          storagePath:
            description: Path for model in storage provided by `storageKey`.
            type: string
          modelFormatVersion:
            description: Version of the model format.
            type: string
          serviceAccountName:
            description: Name of the service account with storage secret.
            type: string
        type: object
      description: An ML model artifact.
      example:
        modelFormatVersion: modelFormatVersion
        serviceAccountName: serviceAccountName
        modelFormatName: modelFormatName
        storagePath: storagePath
        storageKey: storageKey
    ModelArtifactCreate:
      allOf:
      - $ref: '#/components/schemas/BaseArtifactCreate'
      - $ref: '#/components/schemas/ModelArtifactUpdate'
      description: An ML model artifact.
      example: {}
      type: object
    Error:
      description: Error code and message.
      example:
        code: code
        message: message
      properties:
        code:
          description: Error code
          type: string
        message:
          description: Error message
          type: string
      required:
      - code
      - message
      type: object
    SortOrder:
      description: Supported sort direction for ordering result entities.
      enum:
      - ASC
      - DESC
      type: string
    OrderByField:
      description: Supported fields for ordering result entities.
      enum:
      - CREATE_TIME
      - LAST_UPDATE_TIME
      - ID
      type: string
    Artifact:
      description: A metadata Artifact Entity.
      discriminator:
        mapping:
          model-artifact: '#/components/schemas/ModelArtifact'
          doc-artifact: '#/components/schemas/DocArtifact'
        propertyName: artifactType
      oneOf:
      - $ref: '#/components/schemas/ModelArtifact'
      - $ref: '#/components/schemas/DocArtifact'
    BaseArtifact:
      allOf:
      - $ref: '#/components/schemas/BaseArtifactCreate'
      - $ref: '#/components/schemas/BaseResource'
      - properties:
          artifactType:
            type: string
        required:
        - artifactType
        type: object
    ServingEnvironmentList:
      allOf:
      - properties:
          items:
            description: ""
            items:
              $ref: '#/components/schemas/ServingEnvironment'
            readOnly: false
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of ServingEnvironments.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - {}
        - {}
      type: object
    RegisteredModelList:
      allOf:
      - properties:
          items:
            description: ""
            items:
              $ref: '#/components/schemas/RegisteredModel'
            readOnly: false
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of RegisteredModels.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - {}
        - {}
      type: object
    ServingEnvironment:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - type: object
      - $ref: '#/components/schemas/ServingEnvironmentCreate'
      description: A Model Serving environment for serving `RegisteredModels`.
      example: {}
    ServingEnvironmentUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      description: A Model Serving environment for serving `RegisteredModels`.
      example:
        customProperties:
          key:
            int_value: int_value
        description: description
        externalID: externalID
    ServingEnvironmentCreate:
      allOf:
      - type: object
      - $ref: '#/components/schemas/BaseResourceCreate'
      - $ref: '#/components/schemas/ServingEnvironmentUpdate'
      description: A Model Serving environment for serving `RegisteredModels`.
      example: {}
    InferenceService:
      allOf:
      - $ref: '#/components/schemas/BaseResource'
      - $ref: '#/components/schemas/InferenceServiceCreate'
      description: An `InferenceService` entity in a `ServingEnvironment` represents
        a deployed `ModelVersion` from a `RegisteredModel` created by Model Serving.
      example: {}
    InferenceServiceList:
      allOf:
      - properties:
          items:
            description: ""
            items:
              $ref: '#/components/schemas/InferenceService'
            readOnly: false
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of InferenceServices.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - {}
        - {}
      type: object
    ServeModelList:
      allOf:
      - properties:
          items:
            description: Array of `ModelArtifact` entities.
            items:
              $ref: '#/components/schemas/ServeModel'
            type: array
        type: object
      - $ref: '#/components/schemas/BaseResourceList'
      description: List of ServeModel entities.
      example:
        size: 6
        nextPageToken: nextPageToken
        pageSize: 0
        items:
        - {}
        - {}
      type: object
    ServeModel:
      allOf:
      - $ref: '#/components/schemas/BaseExecution'
      - $ref: '#/components/schemas/ServeModelCreate'
      description: An ML model serving action.
      example: {}
      type: object
    ServeModelUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseExecutionUpdate'
      description: An ML model serving action.
    ServeModelCreate:
      allOf:
      - $ref: '#/components/schemas/BaseExecutionCreate'
      - $ref: '#/components/schemas/ServeModelUpdate'
      - properties:
          modelVersionId:
            description: ID of the `ModelVersion` that was served in `InferenceService`.
            type: string
        required:
        - modelVersionId
        type: object
      description: An ML model serving action.
      example:
        modelVersionId: modelVersionId
    InferenceServiceUpdate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceUpdate'
      - properties:
          modelVersionId:
            description: "ID of the `ModelVersion` to serve. If it's unspecified,\
              \ then the latest `ModelVersion` by creation order will be served."
            type: string
          runtime:
            description: Model runtime.
            type: string
          desiredState:
            $ref: '#/components/schemas/InferenceServiceState'
        type: object
      description: An `InferenceService` entity in a `ServingEnvironment` represents
        a deployed `ModelVersion` from a `RegisteredModel` created by Model Serving.
      example:
        desiredState: null
        customProperties:
          key:
            int_value: int_value
        modelVersionId: modelVersionId
        description: description
        externalID: externalID
        runtime: runtime
    InferenceServiceCreate:
      allOf:
      - $ref: '#/components/schemas/BaseResourceCreate'
      - $ref: '#/components/schemas/InferenceServiceUpdate'
      - properties:
          registeredModelId:
            description: ID of the `RegisteredModel` to serve.
            type: string
          servingEnvironmentId:
            description: ID of the parent `ServingEnvironment` for this `InferenceService`
              entity.
            type: string
        required:
        - registeredModelId
        - servingEnvironmentId
        type: object
      description: An `InferenceService` entity in a `ServingEnvironment` represents
        a deployed `ModelVersion` from a `RegisteredModel` created by Model Serving.
      example:
        servingEnvironmentId: servingEnvironmentId
        registeredModelId: registeredModelId
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      description: Bearer JWT scheme
      scheme: bearer
      type: http
